{"ast":null,"code":"var _jsxFileName = \"/home/umar/To be backuped/bootcampwithmamoon/bootcamp/quizapp-react-typescript/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { QuestionCard } from './components/QuestionCard';\nimport { fetchQuizQuestions } from './API'; //types\n\nimport { Difficulty } from './API'; //styles\n\nimport { GlobalStyle, Wrapper } from './App.styles'; //service worker\n\nimport { swDev } from './swDev'; //firebase\n\nimport firebase from './firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const msg = firebase.messaging();\n  msg.requestPermission().then(() => {\n    return msg.getToken();\n  }).then(token => {\n    console.log('token', token);\n  });\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = e => {\n    if (!gameOver) {\n      //user answer\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n\n      if (correct) {\n        setScore(prev => prev + 1);\n      } //save answer in the array for user answers\n\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    //move to next question number if not last \n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n      ;\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"REACT QUIZ\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), gameOver || userAnswers.length === TOTAL_QUESTIONS ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start\",\n        onClick: startTrivia,\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this) : null, !gameOver ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"score\",\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this) : null, loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading questions ....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this), !loading && !gameOver && /*#__PURE__*/_jsxDEV(QuestionCard, {\n        questionNr: number + 1,\n        totalQuestions: TOTAL_QUESTIONS,\n        question: questions[number].question,\n        answers: questions[number].answers,\n        userAnswer: userAnswers ? userAnswers[number] : undefined,\n        callback: checkAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this), !gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next\",\n        onClick: nextQuestion,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"0B8IUhVNcWVRmu6IZtdSZap8T5s=\");\n\n_c = App;\nswDev();\nexport default App;\n\nfunction token(token, arg1) {\n  throw new Error('Function not implemented.');\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/umar/To be backuped/bootcampwithmamoon/bootcamp/quizapp-react-typescript/src/App.tsx"],"names":["React","useState","QuestionCard","fetchQuizQuestions","Difficulty","GlobalStyle","Wrapper","swDev","firebase","TOTAL_QUESTIONS","App","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","msg","messaging","requestPermission","then","getToken","token","console","log","startTrivia","newQuestions","EASY","checkAnswer","e","answer","currentTarget","value","correct","correct_answer","prev","answerObject","question","correctAnswer","nextQuestion","length","answers","undefined","arg1","Error"],"mappings":"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","sourcesContent":["import React , {useState} from 'react';\n\nimport {QuestionCard} from './components/QuestionCard';\nimport {fetchQuizQuestions} from './API';\n\n//types\nimport {Difficulty, QuestionState} from './API';\n\n//styles\nimport {GlobalStyle, Wrapper} from './App.styles';\n\n//service worker\nimport {swDev} from './swDev';\n\n//firebase\nimport firebase from './firebase';\n\n\n\nexport type AnswerObject = {\n  question: string;\n  answer : string;\n  correct : boolean;\n  correctAnswer : string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n\n  const [loading, setLoading] = useState(false);\n  const [questions , setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const msg = firebase.messaging();\n  msg.requestPermission().then(()=> {\n    return msg.getToken();\n  }).then((token: any) => {\n    console.log('token', token)\n  })\n\n  const startTrivia = async ()=> {\n\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    )\n  \n\n  setQuestions(newQuestions);\n  setScore(0);\n\n  setUserAnswers([]);\n  setNumber(0);\n  setLoading(false);\n\n\n\n    };\n    \n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\n    if (!gameOver) {\n      //user answer\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      \n      if(correct) {\n        setScore(prev => prev + 1);\n      } \n\n      //save answer in the array for user answers\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers(prev => [...prev, answerObject])\n    }\n\n  }\n\n  const nextQuestion = () => {\n\n    //move to next question number if not last \n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n;    }else{\n  setNumber(nextQuestion);\n}\n\n  }\n\n  \n  return (\n      <>\n        <GlobalStyle/>\n        <Wrapper>\n        <h1>REACT QUIZ</h1>\n\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n            <button className=\"start\" onClick={startTrivia}>\n              Start\n            </button>\n        ) : null }\n\n        { !gameOver ? (\n            <p className=\"score\">Score: {score}</p>\n        ) : null}\n\n        {loading &&\n            <p>Loading questions ....</p>\n          }\n\n          {!loading && !gameOver &&\n            <QuestionCard\n                questionNr={number + 1}\n                totalQuestions = {TOTAL_QUESTIONS}\n                question={questions[number].question}\n                answers = {questions[number].answers}\n                userAnswer={userAnswers ? userAnswers[number] : undefined}\n                callback={checkAnswer}\n            />\n          }\n\n          { !gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS-1 &&\n              <button className=\"next\" onClick={nextQuestion}>\n          Next\n        </button>\n          }\n        </Wrapper>\n    </>\n  );\n}\nswDev();\n\nexport default App;\nfunction token(token: any, arg1: { console: Console; \"\": any; }) {\n  throw new Error('Function not implemented.');\n}\n\n"]},"metadata":{},"sourceType":"module"}