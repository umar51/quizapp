{"ast":null,"code":"var _jsxFileName = \"/home/umar/To be backuped/bootcampwithmamoon/bootcamp/quizapp-react-typescript/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { QuestionCard } from './components/QuestionCard';\nimport { fetchQuizQuestions } from './API'; //types\n\nimport { Difficulty } from './API';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TOTAL_QUESTIONS = 10; //CONTINUE FROM VIDEO 41 MIN \n\nfunction App() {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = e => {\n    if (!gameOver) {\n      //user answer\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n\n      if (correct) {\n        setScore(prev => prev + 1);\n      } //save answer in the array for user answers\n\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    //move to next question number if not last \n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n      ;\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"REACT QUIZ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 6\n    }, this), gameOver || userAnswers.length === TOTAL_QUESTIONS ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start\",\n      onClick: startTrivia,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this) : null, !gameOver ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"score\",\n      children: \"Score:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this) : null, loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading questions ....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), !loading && !gameOver && /*#__PURE__*/_jsxDEV(QuestionCard, {\n      questionNr: number + 1,\n      totalQuestions: TOTAL_QUESTIONS,\n      question: questions[number].question,\n      answers: questions[number].answers,\n      userAnswer: userAnswers ? userAnswers[number] : undefined,\n      callback: checkAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this), !gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next\",\n      onClick: nextQuestion,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"0B8IUhVNcWVRmu6IZtdSZap8T5s=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/umar/To be backuped/bootcampwithmamoon/bootcamp/quizapp-react-typescript/src/App.tsx"],"names":["React","useState","QuestionCard","fetchQuizQuestions","Difficulty","TOTAL_QUESTIONS","App","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","newQuestions","EASY","checkAnswer","e","answer","currentTarget","value","correct","correct_answer","prev","answerObject","question","correctAnswer","nextQuestion","length","answers","undefined"],"mappings":"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","sourcesContent":["import React , {useState} from 'react';\n\nimport {QuestionCard} from './components/QuestionCard';\nimport {fetchQuizQuestions} from './API';\n\n//types\nimport {Difficulty, QuestionState} from './API';\n\n\ntype AnswerObject = {\n  question: string;\n  answer : string;\n  correct : boolean;\n  correctAnswer : string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\n//CONTINUE FROM VIDEO 41 MIN \nfunction App() {\n\n  const [loading, setLoading] = useState(false);\n  const [questions , setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  \n\n  const startTrivia = async ()=> {\n\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    )\n  \n\n  setQuestions(newQuestions);\n  setScore(0);\n\n  setUserAnswers([]);\n  setNumber(0);\n  setLoading(false);\n\n\n\n    };\n    \n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\n    if (!gameOver) {\n      //user answer\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      \n      if(correct) {\n        setScore(prev => prev + 1);\n      } \n\n      //save answer in the array for user answers\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      setUserAnswers(prev => [...prev, answerObject])\n    }\n\n  }\n\n  const nextQuestion = () => {\n\n    //move to next question number if not last \n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n;    }else{\n  setNumber(nextQuestion);\n}\n\n  }\n\n  \n  return (\n    <div className=\"App\">\n     <h1>REACT QUIZ</h1>\n     {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n        <button className=\"start\" onClick={startTrivia}>\n          Start\n        </button>\n     ) : null }\n     { !gameOver ? (\n        <p className=\"score\">Score:</p>\n     ) : null}\n\n     {loading &&\n        <p>Loading questions ....</p>\n      }\n\n      {!loading && !gameOver &&\n        <QuestionCard\n            questionNr={number + 1}\n            totalQuestions = {TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers = {questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n        />\n      }\n\n      { !gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS-1 &&\n           <button className=\"next\" onClick={nextQuestion}>\n       Next\n     </button>\n      }\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}