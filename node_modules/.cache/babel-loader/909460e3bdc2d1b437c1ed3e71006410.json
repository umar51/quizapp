{"ast":null,"code":"var _jsxFileName = \"/home/umar/To be backuped/bootcampwithmamoon/bootcamp/quizapp-react-typescript/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { QuestionCard } from './components/QuestionCard';\nimport { fetchQuizQuestions } from './API'; //types\n\nimport { Difficulty } from './API';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TOTAL_QUESTIONS = 10; //CONTINUE FROM VIDEO 41 MIN \n\nfunction App() {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  console.log(questions);\n\n  const checkAnswer = e => {};\n\n  const nextQuestion = () => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"REACT QUIZ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 6\n    }, this), gameOver || userAnswers.length === TOTAL_QUESTIONS ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start\",\n      onClick: startTrivia,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this) : null, !gameOver ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"score\",\n      children: \"Score:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this) : null, loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading questions ....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), !loading && !gameOver && /*#__PURE__*/_jsxDEV(QuestionCard, {\n      questionNr: number + 1,\n      totalQuestions: TOTAL_QUESTIONS,\n      question: questions[number].question,\n      answers: questions[number].answers,\n      userAnswer: userAnswers ? userAnswers[number] : undefined,\n      callback: checkAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next\",\n      onClick: nextQuestion,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"0B8IUhVNcWVRmu6IZtdSZap8T5s=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/umar/To be backuped/bootcampwithmamoon/bootcamp/quizapp-react-typescript/src/App.tsx"],"names":["React","useState","QuestionCard","fetchQuizQuestions","Difficulty","TOTAL_QUESTIONS","App","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","startTrivia","newQuestions","EASY","checkAnswer","e","nextQuestion","length","question","answers","undefined"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA+B,OAA/B;AAEA,SAAQC,YAAR,QAA2B,2BAA3B;AACA,SAAQC,kBAAR,QAAiC,OAAjC,C,CAEA;;AACA,SAAQC,UAAR,QAAwC,OAAxC;;AAUA,MAAMC,eAAe,GAAG,EAAxB,C,CAEA;;AACA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,SAAD,EAAaC,YAAb,IAA6BT,QAAQ,CAAkB,EAAlB,CAA3C;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAiB,EAAjB,CAA9C;AACA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,IAAD,CAAxC;AAEAkB,EAAAA,OAAO,CAACC,GAAR,CAAYX,SAAZ;;AAEA,QAAMY,WAAW,GAAG,YAAW;AAE7Bb,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAU,IAAAA,WAAW,CAAC,KAAD,CAAX;AAEA,UAAMI,YAAY,GAAG,MAAMnB,kBAAkB,CAC3CE,eAD2C,EAE3CD,UAAU,CAACmB,IAFgC,CAA7C;AAMFb,IAAAA,YAAY,CAACY,YAAD,CAAZ;AACAN,IAAAA,QAAQ,CAAC,CAAD,CAAR;AAEAF,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAF,IAAAA,SAAS,CAAC,CAAD,CAAT;AACAJ,IAAAA,UAAU,CAAC,KAAD,CAAV;AAIG,GApBH;;AAqBEW,EAAAA,OAAO,CAACC,GAAR,CAAYX,SAAZ;;AAEF,QAAMe,WAAW,GAAIC,CAAD,IAA4C,CAE/D,CAFD;;AAIA,QAAMC,YAAY,GAAG,MAAM,CAE1B,CAFD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,EAEET,QAAQ,IAAIJ,WAAW,CAACc,MAAZ,KAAuBtB,eAAnC,gBACE;AAAQ,MAAA,SAAS,EAAC,OAAlB;AAA0B,MAAA,OAAO,EAAEgB,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,GAIG,IANL,EAOG,CAACJ,QAAD,gBACC;AAAG,MAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,GAEE,IATL,EAWEV,OAAO,iBACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ,EAeG,CAACA,OAAD,IAAY,CAACU,QAAb,iBACC,QAAC,YAAD;AACI,MAAA,UAAU,EAAEN,MAAM,GAAG,CADzB;AAEI,MAAA,cAAc,EAAIN,eAFtB;AAGI,MAAA,QAAQ,EAAEI,SAAS,CAACE,MAAD,CAAT,CAAkBiB,QAHhC;AAII,MAAA,OAAO,EAAInB,SAAS,CAACE,MAAD,CAAT,CAAkBkB,OAJjC;AAKI,MAAA,UAAU,EAAEhB,WAAW,GAAGA,WAAW,CAACF,MAAD,CAAd,GAAyBmB,SALpD;AAMI,MAAA,QAAQ,EAAEN;AANd;AAAA;AAAA;AAAA;AAAA,YAhBJ,eAyBC;AAAQ,MAAA,SAAS,EAAC,MAAlB;AAAyB,MAAA,OAAO,EAAEE,YAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBD;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD;;GA1EQpB,G;;KAAAA,G;AA4ET,eAAeA,GAAf","sourcesContent":["import React , {useState} from 'react';\n\nimport {QuestionCard} from './components/QuestionCard';\nimport {fetchQuizQuestions} from './API';\n\n//types\nimport {Difficulty, QuestionState} from './API';\n\n\ntype AnswerObject = {\n  question: string;\n  answer : string;\n  correct : boolean;\n  correctAnswer : string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\n//CONTINUE FROM VIDEO 41 MIN \nfunction App() {\n\n  const [loading, setLoading] = useState(false);\n  const [questions , setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  console.log(questions)\n\n  const startTrivia = async ()=> {\n\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    )\n  \n\n  setQuestions(newQuestions);\n  setScore(0);\n\n  setUserAnswers([]);\n  setNumber(0);\n  setLoading(false);\n\n\n\n    };\n    console.log(questions)\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\n  }\n\n  const nextQuestion = () => {\n\n  }\n\n  \n  return (\n    <div className=\"App\">\n     <h1>REACT QUIZ</h1>\n     {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n        <button className=\"start\" onClick={startTrivia}>\n          Start\n        </button>\n     ) : null }\n     { !gameOver ? (\n        <p className=\"score\">Score:</p>\n     ) : null}\n\n     {loading &&\n        <p>Loading questions ....</p>\n      }\n\n      {!loading && !gameOver &&\n        <QuestionCard\n            questionNr={number + 1}\n            totalQuestions = {TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers = {questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n        />\n      }\n     <button className=\"next\" onClick={nextQuestion}>\n       Next\n     </button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}